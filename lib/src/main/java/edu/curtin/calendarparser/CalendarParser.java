/* Generated By:JavaCC: Do not edit this line. CalendarParser.java */
package edu.curtin.calendarparser;
import java.io.*;
import edu.curtin.event.Event;
import edu.curtin.event.EventStorage;
import edu.curtin.plugin.PluginClass;
import edu.curtin.plugin.PluginStorage;
import edu.curtin.script.ScriptClass;
import edu.curtin.script.ScriptStorage;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.HashMap;
import java.nio.charset.Charset;

@SuppressWarnings("all")
public class CalendarParser implements CalendarParserConstants {
    public static void parse(String fileName, Charset encoding) throws ParseException, IOException
    {
        FileInputStream fileInputStream = new FileInputStream(fileName);
        InputStreamReader inputStreamReader = new InputStreamReader(fileInputStream, encoding);
        CalendarParser parser = new CalendarParser(fileInputStream);
        parser.start();
    }

  static final public void start() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EVENT_DECLARATION:
      case PLUGIN_DECLARATION:
      case SCRIPT_DECLARATION:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EVENT_DECLARATION:
        event();
        break;
      case PLUGIN_DECLARATION:
        plugin();
        break;
      case SCRIPT_DECLARATION:
        script();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void event() throws ParseException {
    Token date, startTime, duration, title, tokAllDay;
    LocalDate eventDate;
    LocalTime eventTime = null;
    int eventDuration = 0;
    String eventTitle;
    boolean allDay = false;
    EventStorage storage = EventStorage.getInstance();
    jj_consume_token(EVENT_DECLARATION);
    date = jj_consume_token(DATE);
            eventDate = LocalDate.parse(date.image);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TIME:
      startTime = jj_consume_token(TIME);
                eventTime = LocalTime.parse(startTime.image);
      duration = jj_consume_token(DURATION);
                eventDuration = Integer.parseInt(duration.image);
      break;
    case ALL_DAY:
      tokAllDay = jj_consume_token(ALL_DAY);
                allDay = true;
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    title = jj_consume_token(STRING_QUOTE);
            eventTitle = title.image;
            if(allDay)
            {
                Event newEvent = new Event(eventDate, allDay, eventTitle);
                storage.addEvent(newEvent);
            }
            else
            {
                Event newEvent = new Event(eventDate, eventTime, eventDuration, eventTitle);
                storage.addEvent(newEvent);
            }
  }

  static final public void plugin() throws ParseException {
    Token plugin_id, arguments, key, value;
    PluginStorage storage = PluginStorage.getInstance();
    String plugID;
    HashMap<String, String> pluginKeyValues = new HashMap<String, String>();
    jj_consume_token(PLUGIN_DECLARATION);
    plugin_id = jj_consume_token(STRING_NORMAL);
            plugID = plugin_id.image;
            pluginKeyValues.clear();
    jj_consume_token(15);
    getKeys(pluginKeyValues);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 16:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      jj_consume_token(16);
      getKeys(pluginKeyValues);
    }
    jj_consume_token(17);
            PluginClass newPlug = new PluginClass(plugID, pluginKeyValues);
            storage.addPlugin(newPlug);
  }

  static final public void getKeys(HashMap<String, String> plugMap) throws ParseException {
    Token key, value;
    String plugKey;
    String plugValue;
    key = jj_consume_token(STRING_NORMAL);
    jj_consume_token(18);
    value = jj_consume_token(STRING_QUOTE);
        plugKey = key.image;
        plugValue = value.image;
        plugMap.put(plugKey, plugValue);
  }

  static final public void script() throws ParseException {
    Token script;
    String scriptContent;
    ScriptStorage storage = ScriptStorage.getInstance();
    jj_consume_token(SCRIPT_DECLARATION);
    getContent();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SCRIPT_CONTENT:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      getContent();
    }
  }

  static final public void getContent() throws ParseException {
    Token script;
    String scriptContent;
    ScriptStorage storage = ScriptStorage.getInstance();
    script = jj_consume_token(SCRIPT_CONTENT);
        scriptContent = script.image;
        ScriptClass newScript = new ScriptClass(scriptContent);
        storage.addScript(newScript);
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CalendarParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[5];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xe0,0xe0,0xa00,0x10000,0x2000,};
   }

  /** Constructor with InputStream. */
  public CalendarParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CalendarParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CalendarParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public CalendarParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CalendarParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public CalendarParser(CalendarParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CalendarParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[19];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 5; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 19; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
